#!/usr/bin/env python

"""ADD ME"""
import os
import re
import sys
import json
import optparse
import datetime
import contextlib
import collections
from cStringIO import StringIO
import semver
from gitchangelog.gitchangelog import main as __get_raw_changelog

def write_output(filename, data):
    """Writes outout to file"""
    pathname = os.path.abspath(filename)
    with open(pathname, 'w') as file_handle:
        file_handle.write(data)

def get_config():
    """Loads the Kodi plugin data from addon.xml"""
    config = {}
    try:
      root_dir = os.path.abspath(os.getcwd())
      pathname = os.path.join(root_dir, '.kodi-release')
      with open(pathname, 'rb') as kodi_release:
        config = json.loads(kodi_release.read())
    except:
      pass
    return config

def get_raw_changelog():
    """ADD ME"""
    @contextlib.contextmanager
    def capture_changelog():
        """ADD ME"""
        oldout, olderr = sys.stdout, sys.stderr
        try:
            raw_changelog = [StringIO(), StringIO()]
            sys.stdout,sys.stderr = raw_changelog
            yield raw_changelog
        finally:
            sys.stdout, sys.stderr = oldout, olderr
            raw_changelog[0] = raw_changelog[0].getvalue()
            raw_changelog[1] = raw_changelog[1].getvalue()
    with capture_changelog() as raw_changelog:
        __get_raw_changelog()
    return raw_changelog

def get_addon_xml():
    """Loads the Kodi plugin data from addon.xml"""
    root_dir = os.path.abspath(os.getcwd())
    pathname = os.path.join(root_dir, 'addon.xml')
    with open(pathname, 'rb') as addon_xml:
        addon_xml_contents = addon_xml.read()
    return addon_xml_contents

def get_new_addon_xml(config=None):
    cv = current_version()
    nv = next_plugin_version(config=config)
    lc = last_changes(config=config)
    addon_xml = get_addon_xml()
    s = StringIO(addon_xml)
    stop_it = False
    new_addon = ''.decode('utf8')
    last_line = ''
    for line in s:
        line = line.decode('utf8')
        if '<addon' in line and cv in line:
            line = line.replace(cv, nv)
        if '<news>' in line:
            stop_it = True
        if '</extension>' in line and '</news>' in last_line:
            line = ''
            line += '        <news>'
            line += lc.strip()
            line += '</news>'
            line += '\n'
            line += '    </extension>'
            line += '\n'
        if stop_it is False:
            new_addon += line
        if '</news>' in line:
            stop_it = False
        last_line = line
    return new_addon.encode('utf8')

def get_package_json():
    """Loads the Kodi plugin data from addon.xml"""
    root_dir = os.path.abspath(os.getcwd())
    pathname = os.path.join(root_dir, 'package.json')
    with open(pathname, 'rb') as package_json:
        package_json_contents = package_json.read()
        parsed_json = json.loads(package_json_contents)
    return parsed_json

def update_package_json():
    package_json_contents = get_package_json()
    package_json_contents['version'] = get_next_version()
    return json.dumps(package_json_contents, indent=2)

def get_addon_data():
    """Loads the Kodi plugin data from addon.xml"""
    root_dir = os.path.abspath(os.getcwd())
    pathname = os.path.join(root_dir, 'addon.xml')
    with open(pathname, 'rb') as addon_xml:
        addon_xml_contents = addon_xml.read()
        _id = re.search(
            r'(?<!xml )id="(.+?)"',
            addon_xml_contents).group(1)
        author = re.search(
            r'(?<!xml )provider-name="(.+?)"',
            addon_xml_contents).group(1)
        name = re.search(
            r'(?<!xml )name="(.+?)"',
            addon_xml_contents).group(1)
        version = re.search(
            r'(?<!xml )version="(.+?)"',
            addon_xml_contents).group(1)
        desc = re.search(
            r'(?<!xml )description lang="en_GB">(.+?)<',
            addon_xml_contents).group(1)
        email = re.search(
            r'(?<!xml )email>(.+?)<',
            addon_xml_contents).group(1)
        source = re.search(
            r'(?<!xml )source>(.+?)<',
            addon_xml_contents).group(1)
        return {
            'id': _id,
            'author': author,
            'name': name,
            'version': version,
            'desc': desc,
            'email': email,
            'source': source,
        }

def get_next_version(current_version=None, config=None):
    if current_version is None:
        current_version = get_addon_data().get('version')
    _current_version = semver.parse(current_version)
    _next_version = {}
    patch_update = 9
    minor_update = 9
    if config is None:
          config = {}
    if config.get('bumps', {}).get('patch'):
        patch_update = config.get('bumps', {}).get('patch')
    if config.get('bumps', {}).get('minor'):
        minor_update = config.get('bumps', {}).get('minor')
    # patch
    if _current_version.get('patch') > patch_update:
        _next_version['patch'] = 0
    else:
        _next_version['patch'] = _current_version.get('patch') + 1
    # minor
    if _current_version.get('patch') > _next_version['patch']:
        _next_version['minor'] = _current_version.get('minor') + 1
        if _next_version['minor'] > minor_update:
            _next_version['minor'] = 0
    else:
        _next_version['minor'] = _current_version.get('minor')
    # major
    if _current_version.get('minor') > _next_version['minor']:
        _next_version['major'] = _current_version.get('major') + 1
    else:
        _next_version['major'] = _current_version.get('major')
    return str(_next_version.get('major')) + '.' + str(_next_version.get('minor')) + '.' + str(_next_version.get('patch'))

def get_current_date():
    now = datetime.datetime.now()
    year = str(now.year)
    month = str(now.month)
    day =  str(now.day)
    if len(month) < 2:
        month = '0' + month
    if len(day) < 2:
        day = '0' + day
    date = year + '-' + month + '-' + day
    return date

def parse_changelog(raw_log, config=None):
    """ADD ME"""
    i = 0
    log_map = {}
    replacer = []
    last_line = None
    _parsed_log_list = []
    __parsed_log_list = []
    parsed_log_strings = []
    addon_data = get_addon_data()
    parsed_log_str = raw_log.replace('Changelog\n=========\n', '')
    for replacement in config.get('replacements', {}):
        replacer.append((replacement, config.get('replacements', {}).get(replacement).decode('ascii')))
    for rep in replacer:
        if i == 0:
            parsed_log_strings.append(parsed_log_str.replace(rep[0], rep[1]))
        else:
            parsed_log_strings.append(parsed_log_strings[i-1].replace(rep[0], rep[1]))
        i += 1
    __parsed_log_list = parsed_log_strings[len(parsed_log_strings)-1].split('------------')
    for item in __parsed_log_list:
        _parsed_log_list.append(item.strip().replace('------\n', ''))
    for entry in _parsed_log_list:
        lines = entry.split('\n\n\n')
        sublines_idx = []
        for subline in lines:
            __subline = subline.split('\n')
            for idx, _subline in enumerate(__subline):
                try:
                    if _subline == '':
                        sublines_idx.append((__subline[idx-1], __subline[idx+1]))
                except IndexError, _:
                    pass
        for line in lines:
            line = line.encode('utf-8')
            if line[:1] is '-':
                split_line = last_line.split(' ')
                version = split_line[0]
                if '(unreleased)' in version:
                    version = get_next_version()
                if version[:1] is not '(':
                    semver_version = semver.parse(version)
                else:
                    semver_version = get_next_version()
                if len(split_line) > 1:
                    date = split_line[1].replace('(', '').replace(')', '')
                else:
                    date = get_current_date()
                raw_entries = line.rsplit('\n', 0)
                final_entries = []
                j = 0
                for _entry in raw_entries:
                    __entry = _entry.strip().strip('\t\n\r')
                    __entries = __entry.split(']\n')
                    for ___entry in __entries:
                        if ___entry not in final_entries:
                            if ___entry[:1] is not '-' and 'Merge pull' in ___entry:
                                final_entries[j-1] += ' ' + ___entry
                            else:
                                ____entry = ''.join(___entry[___entry.find('-'):].splitlines()).replace('  ', ' ')
                                if ____entry[-1:] != ']':
                                    ____entry += ']'
                                j += 1
                                final_entries.append(____entry)
                raw_parsed_entries = list(set(final_entries))
                parsed_entries = {}
                for parsed_entry in raw_parsed_entries:
                    for subline_idx in sublines_idx:
                        if len(subline_idx) > 0 and subline_idx[0] in parsed_entry:
                            parsed_entry = parsed_entry.replace(' [', ' ' + subline_idx[1].strip() + ' [')
                    _type = None
                    if '(' in parsed_entry:
                        _type = parsed_entry.rsplit('(')[0].replace('- ', '').lower()
                    else:
                        _type = 'misc'
                    scope = None
                    if '(' in parsed_entry:
                        scope = parsed_entry.rsplit('(')[1].rsplit(')')[0].lower()
                    else:
                        scope = 'misc'
                    message = None
                    if ':' in parsed_entry:
                        message = parsed_entry.rsplit(':', 1)[1].rsplit('[', 1)[0].replace('- ', '').strip()
                    else:
                        message = parsed_entry.rsplit('[', 1)[0].replace('- ', '').strip()
                    if '#' in message:
                        _message = ''
                        __msg = message.split(' ')
                        if 'Merge pull' in message:
                            for _msg in __msg:
                                if _msg[:1] == '#':
                                    _pull_url = addon_data.get('source') + '/pull/' + _msg[1:]
                                    _message += '[' + _msg + '](' + _pull_url + ') '
                                else:
                                    _message += _msg + ' '
                        else:
                            for _msg in __msg:
                                if _msg[:1] == '#':
                                    _issue_url = addon_data.get('source') + '/issues/' + _msg[1:]
                                    _message += '[' + _msg + '](' + _issue_url + ') '
                                else:
                                    _message += _msg + ' '
                        message = _message.strip()

                    if _type not in parsed_entries.keys():
                        parsed_entries[_type] = {}

                    if scope not in parsed_entries.get('type', {}).keys():
                        parsed_entries[_type][scope] = []

                    try:
                        author = parsed_entry.rsplit('[', 1)[1].replace(']', '')
                        for rep in replacer:
                            author = author.replace(rep[0], rep[1])
                    except:
                        author = get_addon_data().get('author', '')

                    parsed_entries[_type][scope].append({
                        'raw': parsed_entry,
                        'author': author,
                        'msg': message,
                        'type': _type,
                        'scope': scope,
                        'author_url': 'https://github.com/' + author
                    })

                log_map.update({version: {
                    'version': version,
                    'semver_version': semver_version,
                    'date': date,
                    'entries': parsed_entries}})
            last_line = line
    od = collections.OrderedDict(reversed(sorted(log_map.items())))
    return od

def generate_markdown_changelog(parsed_log, config=None):
    line_length = 79
    if config.get('lineLength'):
        line_length = int(config.get('lineLength'))
    addon_data = get_addon_data()
    md = 'Changelog\n=========\n'
    for log_entries in parsed_log:
        _entry = parsed_log.get(log_entries, {})
        version = _entry.get('version')
        _release = version + ' (' + _entry.get('date') + ')'
        release_line = version.replace(version, '[' + _release + '](' + addon_data.get('source') + '/releases/tag/' + version + ')')
        md += '\n' + release_line + '\n'
        md += '-' * len(_release)
        md += '\n\n'
        for _type in _entry.get('entries', {}):
            md += '- **' + _type + ':**' + '\n'
            for scope in _entry.get('entries', {}).get(_type, {}):
                if ' ' not in scope:
                  md += '  - *' + scope + ':*' + '\n'
                  for entry in _entry.get('entries', {}).get(_type, {}).get(scope, []):
                      _line_msg = '   - ' + entry.get('msg')
                      _line_list = _line_msg.split(' ')
                      _curr_line = ''
                      _line_char_count = 0
                      for _line_part in _line_list:
                          _next_line_char_count = _line_char_count + len(_line_part) + len('     ')
                          if _next_line_char_count > 79:
                              _line_char_count = len(_line_part) + len('     ')
                              _curr_line += '\n      ' + _line_part.strip()
                          else:
                              _curr_line += ' ' + _line_part
                              _line_char_count = _next_line_char_count
                      line_msg = _curr_line
                      line_author = '[[' + entry.get('author') + '](' +  entry.get('author_url') + ')]'
                      line = line_msg + '\n      ' + line_author + '\n'
                      md += line
    return md.rstrip('\n')

def changelog(config=None):
    """ADD ME"""
    raw_log = get_raw_changelog()[0]
    parsed_log = parse_changelog(raw_log=raw_log, config=config)
    markdown_log = generate_markdown_changelog(parsed_log=parsed_log, config=config)
    return markdown_log

def authors(config=None):
    """ADD ME"""
    authors = []
    markdown_authors = ''
    if config is None:
        config = {}
    raw_log = get_raw_changelog()[0]
    parsed_log = parse_changelog(raw_log=raw_log, config=config)
    for ver_log in parsed_log:
        for _type in parsed_log.get(ver_log, {}).get('entries', {}):
            for scope in parsed_log.get(ver_log, {}).get('entries', {}).get(_type, {}):
                for entry in parsed_log.get(ver_log, {}).get('entries', {}).get(_type, {}).get(scope, []):
                    if entry.get('author') not in authors:
                        authors.append(entry.get('author'))
    markdown_authors += 'Authors'+ '\n'
    markdown_authors += '======='+ '\n\n'
    for author in authors:
        markdown_authors += '[' + author + '](' + 'https://github.com/' + author + ')'+ '\n'
    return markdown_authors

def current_version(config=None):
    """ADD ME"""
    return get_addon_data().get('version')

def next_plugin_version(config=None):
    """ADD ME"""
    return get_next_version(config=config)

def last_changes(config=None):
    """ADD ME"""
    if config is None:
        config = {}
    logs = ''
    raw_log = get_raw_changelog()[0]
    parsed_log = parse_changelog(raw_log=raw_log, config=config)
    ver_log = parsed_log.get(get_next_version())
    logs += 'v' + ver_log.get('version')
    logs += ' (' + ver_log.get('date') + '):'
    for _type in ver_log.get('entries', {}):
        for scope in ver_log.get('entries', {}).get(_type, {}):
            for entry in ver_log.get('entries', {}).get(_type, {}).get(scope, []):
                _msg = ''
                msg = entry.get('msg')
                if msg.strip() != '':
                    if '[#' in msg:
                        for idx, part in enumerate(msg.split('[#')):
                            if idx == 0:
                              last_line = part
                            if idx == 1:
                                issue_no = part.split(']')[0]
                                post_link = part.rsplit(')')[1]
                        _msg = last_line + '#' + issue_no + post_link
                    else:
                        _msg = msg
                    logs += '\n' + '- ' + _msg
    return logs

def main():
    p = optparse.OptionParser()
    p.add_option('--authors', '-a', action='store_true')
    p.add_option('--changelog', '-c', action='store_true')
    p.add_option('--plugin-version', '-p', action='store_true')
    p.add_option('--next-plugin-version', '-n', action='store_true')
    p.add_option('--last-changes', '-l', action='store_true')
    p.add_option('--update-addon', '-u', action='store_true')
    p.add_option('--outfile', '-o')
    options, _ = p.parse_args()
    outfile = options.outfile
    config = get_config()
    if options.authors:
        sys.argv = [__file__]
        result = authors(config=config)
        if outfile is not None:
            write_output(filename=outfile, data=result)
        else:
            print result
        return True
    if options.changelog:
        sys.argv = [__file__]
        result = changelog(config=config)
        if outfile is not None:
            write_output(filename=outfile, data=result)
        else:
            print result
        return True
    if options.plugin_version:
        result = current_version(config=config)
        if outfile is not None:
            write_output(filename=outfile, data=result)
        else:
            print result
        return True
    if options.next_plugin_version:
        result = next_plugin_version(config=config)
        if outfile is not None:
            write_output(filename=outfile, data=result)
        else:
            print result
        return True
    if options.last_changes:
        sys.argv = [__file__]
        result = last_changes(config=config)
        if outfile is not None:
            write_output(filename=outfile, data=result)
        else:
            print result
        return True
    if options.update_addon:
        sys.argv = [__file__]
        write_output(filename='./addon.xml', data=get_new_addon_xml(config=config))
        write_output(filename='./package.json', data=update_package_json())
        return True

if __name__ == '__main__':
    main()
